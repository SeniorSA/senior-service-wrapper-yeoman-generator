# ================================================================= #

# Arquivo de configuração do Wrapper.
# Documentação: http://yajsw.sourceforge.net/
#               http://yajsw.sourceforge.net/YAJSW%20Configuration%20Parameters.html

# ================================================================= #
# Propriedades do Serviço
# ================================================================= #
# *ALERTA: NÃO modifique os valores das Propriedades do Serviço enquanto
# a aplicação utilizando este arquivo de configuração já estiver instalada.
# Alterações a essas propriedades não irão surtir efeito até o serviço ser
# reinstalado. Por favor, desinstale o serviço existente ANTES de modificar
# as propriedades e, então, o serviço poderá ser reinstalado sem complicações.

# Nome de exibição do serviço* quando executado via console, pode conter espaços.
wrapper.console.title = {{ config.serviceDisplayName }}

# Nome do serviço*, não pode conter ter espaços. Ex: senior_app.
wrapper.ntservice.name = {{ config.serviceName }}

# Nome de exibição do serviço*, pode conter espaços.  Ex: Senior App X.
wrapper.ntservice.displayname = {{ config.serviceDisplayName }}

# Descrição do serviço*. Ex.: Senior Data Integration Executor is a web server that allows you to execute transformations and jobs remotely.
wrapper.ntservice.description = {{ config.serviceDescription }}

# Modo de iniciação do serviço* (AUTO_START, DELAY_START ou DEMAND_START).
wrapper.ntservice.starttype = {{ config.serviceStartType }}

# Permite que o sistema interaja com o desktop*.
wrapper.ntservice.interactive = false

# Para Sistemas operacionais Posix: diretório em que será criado os arquivos de link K... e S...
# Exemplo: Em caso de Linux Ubuntu:
# wrapper.daemon.run_level_dir = /etc/rcX.d
# Irá criar os links:
# /etc/rc5.d/K99<wrapper.name>
# /etc/rc5.d/S99<wrapper.name>
wrapper.daemon.run_level_dir = ${if (new File('\/etc\/rc0.d').exists()) return '\/etc\/rcX.d' else return '\/etc\/init.d\/rcX.d'}

# ================================================================= #
# Java e JVM
# ================================================================= #

# Diretório de trabalho da aplicação Java. Ex.: ${senior_app}\\app, onde ${senior_app} é uma variável de ambiente do sistema oparacional apontando para a pasta do aplicativo.
{% if config.workingDir -%}
    wrapper.working.dir = {{ config.workingDir }}
{% else -%}
    # wrapper.working.dir =
{% endif %}
# Classe executada quando o wrapper inicia a aplicação. Essa classe precisa implementar
# a interface WrapperListener ou garantr que a classe WrapperManager está inicializada.
# Mais detalhes na seção de integração da documentação.
# Padrão: org.rzo.yajsw.app.WrapperJVMMain
# Alternativa: org.tanukisoftware.wrapper.WrapperJarApp
wrapper.java.mainclass = {{ config.wrapperMainClass }}

# Classe principal da aplicação. Não é requerido quando utilizado com org.tanukisoftware.wrapper.WrapperJarApp.
{% if config.appMainClass -%}
    wrapper.java.app.mainclass = {{ config.appMainClass }}
{% else -%}
    # wrapper.java.app.mainclass =
{% endif -%}

# Diretório temporário.
wrapper.tmp.path = ${jna_tmpdir}

# Parâmetros da JVM.
{% for additional in config.jvmArguments -%}
    wrapper.java.additional.{{ loop.index }} = {{ additional | safe }}
{% else -%}
    # wrapper.java.additional.1 =
{% endfor -%}
#wrapper.java.additional.n = -Dhttp.proxyHost=dominio.com
#wrapper.java.additional.n = -Dhttp.proxyPort=8080
#wrapper.java.additional.n = -Djava.net.useSystemProxies=true
#wrapper.java.additional.n = -Dhttp.nonProxyHosts="localhost|127.0.0.1"

# Configurações de chamada da aplicação
# -------------------------------------

{% if config.javaCommand -%}
# O comando a ser utilizado quando estiver iniciando a JVM.
wrapper.java.command = {{ config.javaCommand }}
wrapper.java.command.minVersion = {{ config.javaMinVersion }}
{% endif -%}

wrapper.java.app.jar = {{ config.workingDir }}/lib/{{ config.jar }}
{% for param in config.jarParameters -%}
    wrapper.app.parameter.{{ loop.index }} = {{ param | safe }}
{% else -%}
    # wrapper.app.parameter.1 =
{% endfor -%}
{% for classpath in config.classpaths -%}
    wrapper.java.classpath.{{ loop.index }} = {{ classpath | safe }}
{% else -%}
    # wrapper.java.classpath.1 =
{% endfor %}
# Wrapper JVM Checks
# ------------------

# Detecção de Threads em DeadLock na JVM
wrapper.java.monitor.deadlock = true
wrapper.java.monitor.deadlock.interval = 60
wrapper.java.monitor.deadlock.restart = true
wrapper.filter.trigger.deadlock.tray = wrapper.java.monitor.deadlock: DEADLOCK IN THREADS:
wrapper.filter.script.deadlock.tray = scripts/trayMessage.gv
wrapper.filter.script.deadlock.tray.args = Deadlock Detected

# ================================================================= #
# Exit Code Properties
# Restart on non zero exit code
# ================================================================= #

wrapper.on_exit.0 = SHUTDOWN
wrapper.on_exit.default = RESTART

# ================================================================= #
# Posix Signal Properties
# Restart on non 9 signal code
# ================================================================= #

wrapper.on_signal.9 = SHUTDOWN
wrapper.on_signal.default = RESTART

# ================================================================= #
# Trigger actions on console output
# ================================================================= #

# On Exception show message in system tray
wrapper.filter.trigger.0 = Exception
wrapper.filter.script.0 = scripts/trayMessage.gv
wrapper.filter.script.0.args = Exception

# ================================================================= #
# Habilitar JMX
# ================================================================= #

wrapper.jmx = true
wrapper.jmx.rmi.port = 12345
wrapper.jmx.rmi.user = senior
wrapper.jmx.rmi.password = senior

# ================================================================= #
# LOG
# ================================================================= #

# Habilita logs de Debug do Wrapper.
# wrapper.debug = TRUE

# Log em console
# --------------

wrapper.console.loglevel = INFO
wrapper.console.format = PM

# Log em arquivo
# --------------

wrapper.logfile = ${wrapper_home}/log/wrapper.log
wrapper.logfile.format = LPTM
# Tamanho máximo (em bytes) do arquivo de log. Para tamanho ilimitado, utilize 0 (zero).
# Pode ser abreviado com os sufixos 'k' (kb) or 'm' (mb). Exemplo: 10m = 10 megabytes.
wrapper.logfile.maxsize = 10m
# Número máximo de arquivos de log, ao atingir o limite, os arquivos mais antigos serão
# deletados. Para quantidade ilimitada, utilize 0 (zero).
wrapper.logfile.maxfiles = 10

# Log do sistema (sys/event)
# --------------------------

wrapper.syslog.loglevel = NONE
